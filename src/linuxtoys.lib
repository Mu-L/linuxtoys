## turbobash library
. /etc/os-release

# whiptail color palette -- remove after full port to zenity
export NEWT_COLORS='
    root=white,black
    border=black,lightgray
    window=black,lightgray
    shadow=black,gray
    title=black,lightgray
    button=black,red
    actbutton=white,red
    checkbox=black,lightgray
    actcheckbox=black,red
    entry=black,lightgray
    label=black,lightgray
    listbox=black,lightgray
    actlistbox=black,red
    textbox=black,lightgray
    acttextbox=black,red
    helpline=white,red
    roottext=black,lightgray
'

# logger -- define variable 'logfile' as the full path to log file
_log_ () {

    exec 2> >(tee "$logfile" >&2)

}

# native package installation
_install_ () {
    
    if [[ -n "$_packages" ]]; then
        if [[ "$ID_LIKE" == *debian* ]] || [[ "$ID_LIKE" == *ubuntu* ]] || [ "$ID" == "debian" ] || [ "$ID" == "ubuntu" ]; then
            for pak in "${_packages[@]}"; do
                if [[ "$pak" =~ ^(steam|yes|code|pyenv)$ ]]; then
                    continue
                fi
                if dpkg -s "$pak" 2>/dev/null 1>&2; then
                    continue
                else
                    sudo apt install -y $pak
                fi
            done
        elif [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
            for pak in "${_packages[@]}"; do
                if [[ "$pak" =~ ^(yes|openrazer|code|pyenv|unityhub|dotnet-sdk-9.0)$ ]]; then
                    continue
                fi
                if pacman -Qi "$pak" 2>/dev/null 1>&2; then
                    continue
                else
                    sudo pacman -S --noconfirm $pak
                fi
            done
        elif [[ "$ID_LIKE" =~ (rhel|fedora) ]] || [[ "$ID" =~ (fedora) ]]; then
            for pak in "${_packages[@]}"; do
                if [[ "$pak" =~ ^(yes|openrazer|code|pyenv)$ ]]; then
                    continue
                fi
                if rpm -qi "$pak" 2>/dev/null 1>&2; then
                    continue
                else
                    sudo dnf in $pak -y
                fi
            done
        elif [[ "$ID_LIKE" == *suse* ]]; then
            for pak in "${_packages[@]}"; do
                if [[ "$pak" =~ ^(yes|openrazer|waydroid|code|pyenv|dotnet-sdk-9.0)$ ]]; then
                    continue
                fi
                if rpm -qi "$pak" 2>/dev/null 1>&2; then
                    continue
                else
                    sudo zypper in $pak -y
                fi
            done
        fi
    fi

}

# INSTAnt install
if [[ "$ID_LIKE" == *debian* ]] || [[ "$ID_LIKE" == *ubuntu* ]] || [ "$ID" == "debian" ] || [ "$ID" == "ubuntu" ]; then
    insta () {
        if [ "$#" -eq 0 ]; then
            return 1
        fi
        sudo apt install -y "$@"
    }
elif [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
    insta () {
        if [ "$#" -eq 0 ]; then
            return 1
        fi
        sudo pacman -S --noconfirm "$@"
    }
elif [[ "$ID_LIKE" =~ (rhel|fedora) ]] || [ "$ID" == "fedora" ]; then
    insta () {
        if [ "$#" -eq 0 ]; then
            return 1
        fi
        sudo dnf in "$@" -y
    }
elif [[ "$ID_LIKE" == *suse* ]]; then
    insta () {
        if [ "$#" -eq 0 ]; then
            return 1
        fi
        sudo zypper in "$@" -y
    }
fi

# flatpak installation
_flatpak_ () {

    if [[ -n "$_flatpaks" ]]; then
        for flat in "${_flatpaks[@]}"; do
            flatpak install --or-update -u -y $flat
        done
    fi

}

# language detect -- add elif for each language in the last if statement
_lang_ () {

    local lang="${LANG:0:2}"
    local available=("pt")
    local ulang=""
    langfile=""

    if [[ " ${available[*]} " == *"$lang"* ]]; then
        ulang="$lang"
    else
        ulang="en"
    fi
    if [ $ulang == "pt" ]; then
        langfile="pt"
    else
        langfile="en"
    fi

}

# subscript invoker
_invoke_ () {

    if [[ -n "$supmenu" ]]; then
        bash <(curl -s https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/main/src/resources/supermenus/${supmenu}.sh)
    elif [[ -n "$subscript" ]]; then
        bash <(curl -s https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/main/src/resources/subscripts/${subscript}.sh)
    fi

}

# wraps all commands in a function in sudo -- usage: _root_ function_name
_root_ () {

    if [ $# -eq 0 ]; then
        return 1
    fi

    local cmd=("$@")

    # Check if already root
    if [ "$(id -u)" -eq 0 ]; then
        "${cmd[@]}"
    else
        sudo bash -c "$(declare -f "${cmd[0]}") ; ${cmd[*]}"
    fi

}

# whiptail messagebox --- remove after full zenity port
_msgbox_ () {

    whiptail --title "$title" --msgbox "$msg" 12 78

}

## non-fastbash functions can be added HERE

# add chaotic aur to arch repos
chaotic_aur_lib () {
    if [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
        # Check if Chaotic-AUR repository is already properly configured
        if ! grep -A1 "\[chaotic-aur\]" /etc/pacman.conf | grep -q "Include = /etc/pacman.d/chaotic-mirrorlist"; then
            cd $HOME
            sudo pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com
            sudo pacman-key --lsign-key 3056513887B78AEB
            sudo pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst'
            sudo pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst'         
            # Add Chaotic-AUR repository configuration if it doesn't exist
            if ! grep -q "\[chaotic-aur\]" /etc/pacman.conf; then
                echo "" | sudo tee -a /etc/pacman.conf
                echo "[chaotic-aur]" | sudo tee -a /etc/pacman.conf
                echo "Include = /etc/pacman.d/chaotic-mirrorlist" | sudo tee -a /etc/pacman.conf
            fi       
            sudo pacman -Syu
            zenity --info --text "$msg024" --height 300 --width 300
        fi
    else
        zenity --error --text "$msg077" --height 300 --width 300
    fi
}

# flatpak enabler
flatpak_in_lib () {

    if command -v flatpak &> /dev/null; then
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --system
    else
        if [[ "$ID_LIKE" == *debian* ]] || [[ "$ID_LIKE" == *ubuntu* ]] || [ "$ID" == "debian" ] || [ "$ID" == "ubuntu" ]; then
            sudo apt install -y flatpak
        elif [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
            sudo pacman -S --noconfirm flatpak
        fi
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --user
        flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo --system
    fi

}

# cachyos safe systemd configs
cachyos_sysd_lib () {

    local _cfgsource="https://raw.githubusercontent.com/CachyOS/CachyOS-Settings/master/usr"
    mkdir -p sysctl-config
    sleep 1
    cd sysctl-config
    {
        echo "${_cfgsource}/lib/udev/rules.d/20-audio-pm.rules"
        echo "${_cfgsource}/lib/udev/rules.d/40-hpet-permissions.rules"
        echo "${_cfgsource}/lib/udev/rules.d/50-sata.rules"
        echo "${_cfgsource}/lib/udev/rules.d/60-ioschedulers.rules"
        echo "${_cfgsource}/lib/udev/rules.d/69-hdparm.rules"
        echo "${_cfgsource}/lib/udev/rules.d/99-cpu-dma-latency.rules"
        } > "udev.txt"
    {
        echo "${_cfgsource}/lib/tmpfiles.d/coredump.conf"
        echo "${_cfgsource}/lib/tmpfiles.d/thp-shrinker.conf"
        echo "${_cfgsource}/lib/tmpfiles.d/thp.conf"
        } > "tmpfiles.txt"
    {
        echo "${_cfgsource}/lib/modprobe.d/20-audio-pm.conf"
        echo "${_cfgsource}/lib/modprobe.d/amdgpu.conf"
        echo "${_cfgsource}/lib/modprobe.d/blacklist.conf"
        echo "${_cfgsource}/lib/modprobe.d/nvidia.conf"
        } > "modprobe.txt"
    {
        echo "${_cfgsource}/lib/sysctl.d/99-cachyos-settings.conf"
        echo "${_cfgsource}/lib/systemd/journald.conf.d/00-journal-size.conf"
        echo "${_cfgsource}/share/X11/xorg.conf.d/20-touchpad.conf"
        } > "other.txt"
    sleep 1
    while read -r url; do wget -P udev "$url"; done < udev.txt
    while read -r url; do wget -P tmpfiles "$url"; done < tmpfiles.txt
    while read -r url; do wget -P modprobe "$url"; done < modprobe.txt
    while read -r url; do wget "$url"; done < other.txt
    sleep 1
    sudo cp -rf udev/* /usr/lib/udev/rules.d/
    sudo cp -rf tmpfiles/* /usr/lib/tmpfiles.d/
    sudo cp -rf modprobe/* /usr/lib/modprobe.d/
    sudo cp -f 99-cachyos-settings.conf /usr/lib/sysctl.d/
    sudo cp -f 00-journal-size.conf /usr/lib/systemd/journald.conf.d/
    sudo cp -f 20-touchpad.conf /usr/share/X11/xorg.conf.d/
    cd ..
    rm -rf sysctl-config

}

# psycachy kernel and KUPiD updater installer
psycachy_lib () {

    bash <(curl -s https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/main/src/resources/other/psycachy/psycachy-install.sh)
    if [ $? -eq 0 ]; then
        mkdir -p $HOME/.local/kupid
        cd $HOME/.local/kupid
        wget https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/main/src/resources/other/kupid/kupid-chk.sh
        wget https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/main/src/resources/other/kupid/kupid-upd.sh
        chmod +x kupid-chk.sh
        chmod +x kupid-upd.sh
        mkdir -p $HOME/.config/autostart
        cd $HOME/.config/autostart
        wget https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/main/src/resources/other/kupid/kupid.desktop
        # install cachyos systemd configs
        cachyos_sysd_lib
    fi

}

# preload installer
preload_lib () {

    if whiptail --title "Preload" --yesno "$msg208" 12 78; then
        if [[ "$ID" =~ ^(arch|cachyos)$ ]] || [[ "$ID_LIKE" == *arch* ]] || [[ "$ID_LIKE" == *archlinux* ]]; then
            chaotic_aur_lib
        fi
        if [[ "$ID_LIKE" =~ (rhel|fedora) ]] || [ "$ID" == "fedora" ]; then
            sudo dnf copr enable elxreno/preload -y
        fi
        insta preload
        sudo systemctl enable preload
        sudo systemctl start preload
    fi

}

# zenity libs
zeninf () {
    zenity --info --text "$1" --width 360 --height 300
    return 0
}
zenwrn () {
    zenity --warning --text "$1" --width 360 --height 300
    return 0
}

## error handlers
fatal() {
    zenity --error --title "Fatal Error" --text "$1" --width 360 --height 300
    exit 1
}
nonfatal() {
    zenity --error --title "Error" --text "$1" --width 360 --height 300
    return 1
}


# shader booster
sboost_lib () {

    cd $HOME
    if [ "$ID" == "cachyos" ]; then
        wget https://github.com/psygreg/shader-booster/releases/latest/download/patcher-cachy.fish
        chmod +x patcher-cachy.fish
        fish ./patcher-cachy.fish
        rm patcher-cachy.fish
    else
        wget https://github.com/psygreg/shader-booster/releases/latest/download/patcher.sh
        chmod +x patcher.sh
        ./patcher.sh
        rm patcher.sh
    fi

}

# split lock mitigation disabler
dsplitm_lib () {

    if [ ! -f /etc/sysctl.d/99-splitlock.conf ]; then
        echo 'kernel.split_lock_mitigate=0' | sudo tee /etc/sysctl.d/99-splitlock.conf >/dev/null
        zeninf "$msg022"
    else
        zeninf "$msg043"
    fi

}

# CachyOS kernel for Fedora
kernel_compat () {

    sudo dnf copr enable bieszczaders/kernel-cachyos
    insta kernel-cachyos kernel-cachyos-devel-matched
    sudo setsebool -P domain_kernel_load_modules on
    sudo dracut -f --regenerate-all
    sudo grub2-mkconfig -o /boot/grub2/grub.cfg
    zeninf "$msg036"

}

kernel_performance () {

    sudo dnf copr enable bieszczaders/kernel-cachyos-lto
    insta kernel-cachyos-lto kernel-cachyos-lto-devel-matched
    sudo setsebool -P domain_kernel_load_modules on
    sudo dracut -f --regenerate-all
    sudo grub2-mkconfig -o /boot/grub2/grub.cfg
    zeninf "$msg036"

}

fedora_cachyos_menu_lib () {

    while :; do
        CHOICE=$(zenity --list --title "CachyOS Kernel" \
            --column Version \
    	    "$msg075" \
            "$msg076" \
            "$msg070" \
            --height 330 --width 300)

        if [ $? -ne 0 ]; then
            return
        fi

        case $CHOICE in
        "$msg075") kernel_compat ;;
        "$msg076") kernel_performance ;;
        "$msg070") return ;;
        *) echo "Invalid Option" ;;
        esac
    done

}

# CachyOS kernel for Arch
cachyos_arch_lib () {

    chaotic_aur_lib
    insta linux-cachyos linux-cachyos-headers
    if command -v dracut >/dev/null 2>&1; then
        sudo dracut -f --regenerate-all
    elif command -v mkinitcpio >/dev/null 2>&1; then
        sudo mkinitcpio -P
    fi
    sudo grub-mkconfig -o /boot/grub/grub.cfg

}

# power optimizer for laptops
psave_lib () {

    if [[ "$ID_LIKE" == *debian* ]] || [[ "$ID_LIKE" == *ubuntu* ]] || [ "$ID" == "debian" ] || [ "$ID" == "ubuntu" ]; then
        sudo add-apt-repository ppa:linrunner/tlp
        sudo apt update
    fi
    insta powertop tlp tlp-rdw smartmontools ethtool
    sudo systemctl enable tlp.service
    sudo systemctl enable NetworkManager-dispatcher.service
    sudo systemctl mask systemd-rfkill.service systemd-rfkill.socket
    cd $HOME
    git clone https://github.com/AdnanHodzic/auto-cpufreq.git
    cd auto-cpufreq && sudo ./auto-cpufreq-installer
    cd ..
    sleep 1
    rm -rf auto-cpufreq
    sudo auto-cpufreq --install
    flatpak_in_lib
    flatpak install --or-update -y com.github.d4nj1.tlpui --system
    zeninf "$msg036"

}

# patcher for debian testing
debfixer_lib () {

    local codename=$(lsb_release -sc 2>/dev/null || grep VERSION_CODENAME /etc/os-release | cut -d= -f2)
    if [ "$ID" == "debian" ]; then
        if ! su -c 'grep -q "^${USER} ALL=(ALL:ALL) ALL" /etc/sudoers'; then
            su -c "sed -i '\|^root[[:space:]]\\+ALL=(ALL:ALL)[[:space:]]\\+ALL$|a ${USER} ALL=(ALL:ALL) ALL' /etc/sudoers"
            sleep 1
        fi
        if [[ "$codename" =~ ^(trixie|testing)$ ]]; then
            sudo apt modernize-sources
            cd $HOME
            wget https://raw.githubusercontent.com/psygreg/linuxtoys/refs/heads/main/src/resources/other/debian/debian.sources
            sleep 1
            sudo cp -f debian.sources /etc/apt/sources.list.d/
            sleep 1
            sudo apt update
            rm debian.sources
        fi
    fi

}
